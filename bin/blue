#!/usr/bin/env node

const path = require('path')
const program = require('commander')
const packageJson = require('../package')
const lib = require('../lib')
const findRoot = require('../lib/helpers/find-root')

const TEMPLATE_DIRS = ['blueprints', '.blueprint']

program
  .version(packageJson.version)
  .description(packageJson.description)
  .usage('<command> [options]')

program
  .command('new <name>')
  .alias('n')
  .description('Creates a new blueprint')
  .action(template => lib.create(findRoot(TEMPLATE_DIRS, false), template))

program
  .command('list [template]')
  .alias('l')
  .description('Shows all available blueprints')
  .action(template => lib.list(findRoot(TEMPLATE_DIRS), template))

program
  .command('generate <template> <name> [args...]')
  .alias('g')
  .description('Creates static files from a blueprint')
  .option('-f, --force', 'Overwrite any existing files')
  .option('-p, --preview', 'Preview of what will happen')
  .action((template, name, args, options) => {
    let src = findRoot(TEMPLATE_DIRS)
    let dest = path.resolve(src, '..')
    lib.generate(src, dest, template, name, args, options)
  })

program.parse(process.argv)

// error on invalid commands
if (program.args.length) {
  let command = program.args[program.args.length - 1]
  if (typeof command !== 'object') {
    let me = 'blue'
    console.log(
      `${me}: '${command}' is not a valid ${me} command. See '${me} --help'`
    )
  }
} else {
  program.outputHelp()
}
