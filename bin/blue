#!/usr/bin/env node

const path = require('path')
const program = require('commander')
const packageConfig = require('../package')
const lib = require('../lib')
const assert = require('../lib/helpers/assert')
const findRoot = require('../lib/helpers/find-root')

const TEMPLATE_DIRS = ['blueprints', '.blueprint']

program
  .version(packageConfig.version)
  .description(packageConfig.description)
  .usage('<command> [options]')

program
  .command('new <name>')
  .alias('n')
  .description('Creates a new blueprint')
  .action(name => lib.create(findRoot(TEMPLATE_DIRS, false), name))

program
  .command('list [template]')
  .alias('l')
  .description('Shows all available blueprints')
  .action(template => lib.list(findRoot(TEMPLATE_DIRS), template))

program
  .command('generate <template> <name> [args...]')
  .alias('g')
  .description('Creates static files from a blueprint')
  .option('-p, --preview', 'Preview of what will happen')
  .option('-s, --skip-overwrites', 'Skip overwriting existing files.')
  .action((template, name, args, options) => {
    let src = findRoot(TEMPLATE_DIRS)
    let dest = path.resolve(src, '..')
    lib.generate(path.join(src, template), dest, name, args, options)
  })

program.parse(process.argv)

// error on invalid commands
if (program.args.length) {
  let command = program.args[program.args.length - 1]
  let me = 'blue'
  assert(
    typeof command === 'object',
    `'${command}' is not a valid ${me} command. See '${me} --help'`
  )
} else {
  program.outputHelp()
}
