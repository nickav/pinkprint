#!/usr/bin/env node

const path = require('path');
const yargs = require('yargs');

const packageJson = require('../package.json');
const main = require('../src');

const me = path.basename(__filename);
const ctx = main.createContext();

const invalidCommand = (argv) => {
  const cmd = argv._[0];
  if (!cmd) {
    console.log(`Please specify a command. See '${me} --help'`);
    return;
  }

  console.log(`'${cmd}' is not a valid ${me} command. See '${me} --help'`);
};

const commandOptions = (yargs) => {
  yargs.option('preview', {
    describe: 'Preview without modifying any files',
    type: 'boolean',
    alias: 'p',
    default: false,
  });

  yargs.option('output-dir', {
    describe: 'Change the default output directory',
    type: 'string',
    alias: 'o',
  });
};

const cli = yargs
  .command(
    ['init', 'i'],
    'Creates the default config file',
    () => {},
    (argv) => main.runInit(ctx, argv)
  )

  .command(
    ['new <name>', 'n'],
    'Creates a new pinkprint',
    commandOptions,
    (argv) => main.runNew(ctx, argv)
  )

  .command(
    ['list', 'l'],
    'List all commands',
    () => {},
    (argv) => main.runList(ctx, argv)
  )

  .command(
    ['generate <command> <name> [args..]', 'g'],
    'Creates files from a pinkprint command',
    commandOptions,
    (argv) => main.runGenerate(ctx, argv)
  )

  .option('verbose', {
    describe: 'Print verbose output',
    default: false,
  })

  .help('help')
  .alias('help', 'h')
  .example('pink new reducer', 'Create a new pinkprint')
  .example('pink list', 'Show all pinkprint commands')
  .example('pink generate component Button', 'Generate files')

  .version('version', packageJson.version)
  .alias('version', 'v')

  .usage(`Usage: ${me} <command> [options]`)
  .command('*', '', () => {}, invalidCommand);

const commands = (ctx.config || {}).commands || [];
Object.keys(commands).forEach((key) => {
  const command = commands[key];

  cli.command(
    [key + ' <name> [args..]'],
    command.description || '',
    (yargs) => {
      commandOptions(yargs);

      (command.args || []).forEach((arg) =>
        yargs.option(arg, typeof arg === 'string' ? { describe: ' ' } : arg)
      );
    },
    (argv) => main.generate(ctx, argv, command)
  );
});

// finalize the yars cli
cli.argv;
